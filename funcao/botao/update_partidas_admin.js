const { pool, getAllMatches, getTournamentsFromDB } = require('../../banco/database');
const { formatDate, chunkArray, formatTime } = require('../../utils/utils');
const security = require('../../admin/security');

// Fun√ß√£o principal que trata a atualiza√ß√£o de partidas
async function handleUpdatePartida(bot, chatId, messageId, userId, isAdmin, data, callbackQuery) {
     // Verifica se o comando √© para atualizar uma partida
    if (data === 'update_match') {
        // Garante que apenas administradores possam acessar
        if (!isAdmin) {
            return await bot.telegram.answerCbQuery(callbackQuery.id, { text: "‚ùå Acesso n√£o autorizado" });
        }

        try {
            // Filtra partidas que n√£o est√£o encerradas (id_status !== 3)
            const matches = (await getAllMatches()).filter(match => match.id_status !== 3);
            if (!matches || matches.length === 0) {
                // Se n√£o houver partidas, avisa o usu√°rio
                return await bot.telegram.editMessageText(chatId, messageId, null, 'Nenhuma partida cadastrada para atualizar.', {
                    reply_markup: { inline_keyboard: [[{ text: "üîô Voltar", callback_data: "admin_agenda" }]] }
                });
            }

            // Monta os bot√µes de sele√ß√£o de partida com informa√ß√µes √∫teis
            const matchButtons = matches.map(match => ({
                text: `üéÆ ${security.escapeHtml(match.team_name || 'Sem time')} | üèÜ ${security.escapeHtml(match.tournament_name || 'Desconhecido')} | üóìÔ∏è ${match.dt_match ? formatDate(match.dt_match) : 'Data indefinida'} |  ‚è∞ ${match.dt_time ? formatTime(match.dt_time) : 'Sem hora'}`,
                callback_data: `select_match_update_${match.id_matches}`
            }));

            const chunkedButtons = chunkArray(matchButtons, 1);
            chunkedButtons.push([{ text: "üîô Voltar", callback_data: "admin_agenda" }]);

            // Mostra a lista de partidas para atualiza√ß√£o
            await bot.telegram.editMessageText(chatId, messageId, null, 'Selecione a partida para atualizar:', {
                reply_markup: { inline_keyboard: chunkedButtons }
            });

            return true;
        } catch (error) {
            // Erro ao buscar partidas
            console.error('Erro ao listar partidas:', error);
            await bot.telegram.editMessageText(chatId, messageId, null, '‚ùå Erro ao listar partidas.', {
                reply_markup: { inline_keyboard: [[{ text: "üîô Voltar", callback_data: "admin_agenda" }]] }
            });
            return true;
        }
    }

    // Trata a sele√ß√£o de uma partida espec√≠fica
    if (data.startsWith('select_match_update_')) {
        const matchId = security.validateId(data.replace('select_match_update_', ''));
        if (!matchId) return false;

        // Exibe op√ß√µes de atualiza√ß√£o para a partida selecionada
        await bot.telegram.editMessageText(chatId, messageId, null, 'Selecione o que deseja atualizar:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üìÖ Data", callback_data: `update_match_date_${matchId}` }],
                    [{ text: "‚è∞ Hora", callback_data: `update_match_time_${matchId}` }],
                    [{ text: "üéÆ Advers√°rio", callback_data: `update_match_team_${matchId}` }],
                    [{ text: "üèÜ Torneio", callback_data: `update_match_tournament_${matchId}` }],
                    [{ text: "üìå Formato", callback_data: `update_match_format_${matchId}` }],
                    [{ text: "üîô Voltar", callback_data: "update_match" }]
                ]
            }
        });
        return true;
    }

     // Trata o in√≠cio do processo de atualiza√ß√£o do formato da partida (MD1, MD3, etc.)
    if (data.startsWith('update_match_format_')) {
        const matchId = security.validateId(data.replace('update_match_format_', ''));
        if (!matchId) return false;

        // Salva o estado de atualiza√ß√£o
        console.log("üéØ Entrou no bot√£o de escolher formato");
        console.log("üìå matchId recebido:", matchId);

        bot.context.userStates[userId] = { step: 'updating_match_format', matchId };

        // Exibe bot√µes para escolher novo formato
        await bot.telegram.sendMessage(chatId, 'üìå Escolha o novo formato da partida:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üéØ MD1", callback_data: `set_format_edit_1_${matchId}` }],
                    [{ text: "üéØ MD3", callback_data: `set_format_edit_2_${matchId}` }],
                    [{ text: "üéØ MD5", callback_data: `set_format_edit_3_${matchId}` }],
                    [{ text: "üîô Voltar", callback_data: `select_match_update_${matchId}` }]
                ]
            }
        });
        return true;
    }

    // Executa a atualiza√ß√£o do formato da partida no banco
    if (data.startsWith('set_format_edit_')) {
        let matchId, id_formato;
        try {
            console.log('üîç Callback de formato recebido:', data);
            
            // Extrai os par√¢metros
            const parts = data.split('_');
             id_formato = parseInt(parts[3]);
             matchId = parseInt(parts[4]);
            
            console.log('üìä Par√¢metros extra√≠dos:', {id_formato, matchId});
    
            // Valida√ß√£o
            if (isNaN(id_formato) || isNaN(matchId)) {
                throw new Error('IDs inv√°lidos');
            }

            let md= null;
            if(id_formato === 1){
                md=1
            }else if(id_formato === 2){
                md=3
            }else if(id_formato === 3){
                md=5
            }
            
            // Feedback imediato para o usu√°rio
            await bot.telegram.answerCbQuery(callbackQuery.id, {
                text: `‚åõ Atualizando para MD${md}...`
            });
    
            // Atualiza√ß√£o no banco de dados
            const [result] = await pool.execute(
                'UPDATE tb_matches SET id_formato = ? WHERE id_matches = ?',
                [id_formato, matchId]
            );
            
            console.log('‚úÖ Resultado da atualiza√ß√£o:', md);
    
            // Atualiza√ß√£o da mensagem
            await bot.telegram.editMessageText(
                chatId,
                messageId,
                null,
                `‚úÖ Formato atualizado para: MD${md}`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ 
                                text: "‚Ü©Ô∏è Voltar √† partida", 
                                callback_data: `select_match_update_${matchId}` 
                            }]
                        ]
                    }
                }
            );
    
            return true;
    
        } catch (error) {
            console.error('‚ùå Erro cr√≠tico:', error);
            
            // Tenta enviar mensagem de erro
            try {
                await bot.telegram.answerCbQuery(callbackQuery.id, {
                    text: "‚ùå Falha na atualiza√ß√£o"
                });
                
                await bot.telegram.editMessageText(
                    chatId,
                    messageId,
                    null,
                    "‚ö†Ô∏è Erro ao atualizar formato. Tente novamente.",
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ 
                                    text: "üîÑ Tentar novamente", 
                                    callback_data: `update_match_format_${matchId}` 
                                }]
                            ]
                        }
                    }
                );
            } catch (secondaryError) {
                console.error('‚ùå Falha ao enviar mensagem de erro:', secondaryError);
            }
            
            return false;
        }
    }
    
    
    
// Inicia atualiza√ß√£o da data da partida
    if (data.startsWith('update_match_date_')) {
        const matchId = security.validateId(data.replace('update_match_date_', ''));
        if (!matchId) return false;

        bot.context.userStates[userId] = { step: 'updating_match_date', matchId };
        await bot.telegram.sendMessage(chatId, 'üìÖ Envie a nova data no formato DD/MM/AAAA');
        return true;
    }

    // Inicia atualiza√ß√£o da hora da partida
    if (data.startsWith('update_match_time_')) {
        const matchId = security.validateId(data.replace('update_match_time_', ''));
        if (!matchId) return false;

        bot.context.userStates[userId] = { step: 'updating_match_time', matchId };
        await bot.telegram.sendMessage(chatId, '‚è∞ Envie o novo hor√°rio no formato HH:MM');
        return true;
    }

      // Inicia troca de advers√°rio
    if (data.startsWith('update_match_team_')) {
        const matchId = security.validateId(data.replace('update_match_team_', ''));
        if (!matchId) return false;

        // Busca todos os times dispon√≠veis, exceto FURIA
        try {
            const [teams] = await pool.query(
                'SELECT id_teams, nm_name FROM tb_teams WHERE nm_name != "FURIA" ORDER BY nm_name'
            );

            if (teams.length === 0) {
                return await bot.telegram.answerCbQuery(callbackQuery.id, {
                    text: "‚ùå Nenhum time dispon√≠vel"
                });
            }

            const teamButtons = teams.map(team => ({
                text: security.escapeHtml(team.nm_name),
                callback_data: `select_new_team_${matchId}_${team.id_teams}`
            }));

            const chunkedButtons = chunkArray(teamButtons, 2);
            chunkedButtons.push([{ text: "‚ùå Cancelar", callback_data: `select_match_update_${matchId}` }]);

            await bot.telegram.editMessageText(chatId, messageId, null, 'Selecione o NOVO advers√°rio:', {
                reply_markup: { inline_keyboard: chunkedButtons }
            });

            return true;

        } catch (error) {
            console.error('Erro ao buscar times:', error);
            await bot.telegram.editMessageText(chatId, messageId, null, '‚ùå Erro ao carregar times.', {
                reply_markup: { inline_keyboard: [[{ text: "üîô Voltar", callback_data: `select_match_update_${matchId}` }]] }
            });
            return true;
        }
    }

    // Finaliza troca de time advers√°rio no banco
    if (data.startsWith('select_new_team_')) {
        const parts = data.split('_');
        const matchId = security.validateId(parts[3]);
        const teamId = security.validateId(parts[4]);
        if (!matchId || !teamId) return false;

        try {
            const [matchRows] = await pool.query(
                'SELECT id_multivalorado FROM tb_matches WHERE id_matches = ?',
                [matchId]
            );
            if (matchRows.length === 0) throw new Error('Partida n√£o encontrada');

            const id_multivalorado = matchRows[0].id_multivalorado;
            await pool.query('UPDATE tb_multivalorado SET id_teams = ? WHERE id_multivalorado = ?', [teamId, id_multivalorado]);

            const [team] = await pool.query('SELECT nm_name FROM tb_teams WHERE id_teams = ?', [teamId]);
            await bot.telegram.editMessageText(chatId, messageId, null, `‚úÖ Advers√°rio atualizado para: ${security.escapeHtml(team[0].nm_name)}`, {
                reply_markup: { inline_keyboard: [[{ text: "üîô Voltar ao Menu", callback_data: "admin_agenda" }]] }
            });
            return true;

        } catch (error) {
            console.error('Erro ao atualizar advers√°rio:', error);
            await bot.telegram.editMessageText(chatId, messageId, null, `‚ùå Erro ao atualizar advers√°rio: ${security.escapeHtml(error.message)}`, {
                reply_markup: { inline_keyboard: [[{ text: "üîô Voltar", callback_data: `select_match_update_${matchId}` }]] }
            });
            return true;
        }
    }

     // Atualiza√ß√£o de torneio segue a mesma l√≥gica, com filtro por times vinculados
    if (data.startsWith('update_match_tournament_')) {
        const matchId = security.validateId(data.replace('update_match_tournament_', ''));
        if (!matchId) return false;

        try {
            const [matchData] = await pool.query(`
                SELECT mv.id_teams
                FROM tb_matches m
                INNER JOIN tb_multivalorado mv ON m.id_multivalorado = mv.id_multivalorado
                WHERE m.id_matches = ?
            `, [matchId]);

            if (matchData.length === 0) throw new Error('Partida n√£o encontrada');

            const teamId = matchData[0].id_teams;

            const [validTournaments] = await pool.query(`
                SELECT t.id_tournaments, t.nm_name
                FROM tb_tournaments t
                INNER JOIN tb_multivalorado mv ON mv.id_tournaments = t.id_tournaments
                WHERE mv.id_teams = ?
                GROUP BY t.id_tournaments, t.nm_name
            `, [teamId]);

            if (validTournaments.length === 0) {
                return await bot.telegram.answerCbQuery(callbackQuery.id, {
                    text: "‚ùå Este time n√£o est√° vinculado a nenhum outro torneio"
                });
            }

            const tournamentButtons = validTournaments.map(tournament => ({
                text: security.escapeHtml(tournament.nm_name),
                callback_data: `select_new_tournament_${matchId}_${tournament.id_tournaments}`
            }));

            const chunkedButtons = chunkArray(tournamentButtons, 2);
            chunkedButtons.push([{ text: "‚ùå Cancelar", callback_data: `select_match_update_${matchId}` }]);

            await bot.telegram.editMessageText(chatId, messageId, null, 'üèÜ Selecione o NOVO torneio dispon√≠vel para esse advers√°rio:', {
                reply_markup: { inline_keyboard: chunkedButtons }
            });

            return true;

        } catch (error) {
            console.error('Erro ao carregar torneios filtrados:', error);
            await bot.telegram.editMessageText(chatId, messageId, null, `‚ùå Erro ao carregar torneios: ${security.escapeHtml(error.message)}`, {
                reply_markup: {
                    inline_keyboard: [[{ text: "üîô Voltar", callback_data: `select_match_update_${matchId}` }]]
                }
            });
            return true;
        }
    }

    // Atualiza torneio no banco de dados
    if (data.startsWith('select_new_tournament_')) {
        const parts = data.split('_');
        const matchId = security.validateId(parts[3]);
        const tournamentId = security.validateId(parts[4]);
        if (!matchId || !tournamentId) return false;

        try {
            const [match] = await pool.query(
                'SELECT id_multivalorado FROM tb_matches WHERE id_matches = ?',
                [matchId]
            );
            if (match.length === 0) throw new Error('Partida n√£o encontrada');

            const id_multivalorado = match[0].id_multivalorado;

            await pool.query(
                'UPDATE tb_multivalorado SET id_tournaments = ? WHERE id_multivalorado = ?',
                [tournamentId, id_multivalorado]
            );

            const [tournament] = await pool.query(
                'SELECT nm_name FROM tb_tournaments WHERE id_tournaments = ?',
                [tournamentId]
            );

            await bot.telegram.editMessageText(chatId, messageId, null, `‚úÖ Torneio atualizado para: ${security.escapeHtml(tournament[0].nm_name)}`, {
                reply_markup: { inline_keyboard: [[{ text: "üîô Voltar ao Menu", callback_data: "admin_agenda" }]] }
            });

            return true;

        } catch (error) {
            console.error('Erro ao atualizar torneio:', error);
            await bot.telegram.editMessageText(chatId, messageId, null, `‚ùå Erro ao atualizar torneio: ${security.escapeHtml(error.message)}`, {
                reply_markup: { inline_keyboard: [[{ text: "üîô Voltar", callback_data: `select_match_update_${matchId}` }]] }
            });
            return true;
        }
    }

    return false;
}

module.exports = { handleUpdatePartida };
